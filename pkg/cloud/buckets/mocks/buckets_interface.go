// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/jenkins-x/jx/pkg/cloud/buckets (interfaces: Provider)

package buckets_test

import (
	bufio "bufio"
	io "io"
	"reflect"
	"time"

	pegomock "github.com/petergtz/pegomock"
)

type MockProvider struct {
	fail func(message string, callerSkip ...int)
}

func NewMockProvider(options ...pegomock.Option) *MockProvider {
	mock := &MockProvider{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockProvider) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockProvider) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockProvider) CreateNewBucketForCluster(_param0 string, _param1 string) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProvider().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CreateNewBucketForCluster", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockProvider) DownloadFileFromBucket(_param0 string) (*bufio.Scanner, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProvider().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DownloadFileFromBucket", params, []reflect.Type{reflect.TypeOf((**bufio.Scanner)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *bufio.Scanner
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*bufio.Scanner)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockProvider) EnsureBucketIsCreated(_param0 string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProvider().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("EnsureBucketIsCreated", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockProvider) UploadFileToBucket(_param0 io.Reader, _param1 string, _param2 string) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockProvider().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("UploadFileToBucket", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockProvider) VerifyWasCalledOnce() *VerifierMockProvider {
	return &VerifierMockProvider{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockProvider) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockProvider {
	return &VerifierMockProvider{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockProvider) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockProvider {
	return &VerifierMockProvider{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockProvider) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockProvider {
	return &VerifierMockProvider{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockProvider struct {
	mock                   *MockProvider
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockProvider) CreateNewBucketForCluster(_param0 string, _param1 string) *MockProvider_CreateNewBucketForCluster_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CreateNewBucketForCluster", params, verifier.timeout)
	return &MockProvider_CreateNewBucketForCluster_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockProvider_CreateNewBucketForCluster_OngoingVerification struct {
	mock              *MockProvider
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockProvider_CreateNewBucketForCluster_OngoingVerification) GetCapturedArguments() (string, string) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockProvider_CreateNewBucketForCluster_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockProvider) DownloadFileFromBucket(_param0 string) *MockProvider_DownloadFileFromBucket_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DownloadFileFromBucket", params, verifier.timeout)
	return &MockProvider_DownloadFileFromBucket_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockProvider_DownloadFileFromBucket_OngoingVerification struct {
	mock              *MockProvider
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockProvider_DownloadFileFromBucket_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockProvider_DownloadFileFromBucket_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockProvider) EnsureBucketIsCreated(_param0 string) *MockProvider_EnsureBucketIsCreated_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "EnsureBucketIsCreated", params, verifier.timeout)
	return &MockProvider_EnsureBucketIsCreated_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockProvider_EnsureBucketIsCreated_OngoingVerification struct {
	mock              *MockProvider
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockProvider_EnsureBucketIsCreated_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockProvider_EnsureBucketIsCreated_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockProvider) UploadFileToBucket(_param0 io.Reader, _param1 string, _param2 string) *MockProvider_UploadFileToBucket_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UploadFileToBucket", params, verifier.timeout)
	return &MockProvider_UploadFileToBucket_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockProvider_UploadFileToBucket_OngoingVerification struct {
	mock              *MockProvider
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockProvider_UploadFileToBucket_OngoingVerification) GetCapturedArguments() (io.Reader, string, string) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *MockProvider_UploadFileToBucket_OngoingVerification) GetAllCapturedArguments() (_param0 []io.Reader, _param1 []string, _param2 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]io.Reader, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(io.Reader)
		}
		_param1 = make([]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]string, len(c.methodInvocations))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
	}
	return
}
